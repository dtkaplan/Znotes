% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_segments.R
\name{create_segments}
\alias{create_segments}
\title{Create a data frame for plotting piecewise-linear segments}
\usage{
create_segments(ftilde, domain, h = NULL, nsegs = 20)
}
\arguments{
\item{ftilde}{a tilde expression, as in \code{slice_plot()}}

\item{domain}{specification of a domain, as in \code{slice_plot()}}

\item{h}{an alternative to \code{nsegs}, giving the length of each segment.}

\item{nsegs}{how many segments to divide the domain into}
}
\value{
a data frame (see examples)
}
\description{
Functions can be approximated by a sequence of piecewise-linear
segments. This function generates the information needed for
plotting those segments, as you might if the piecewise linear approximation
were plotted on top of the slice_plot() of the function.
}
\examples{
\dontrun{
fun <- sin(x) ~ x
dom <- bounds(x = c(-5,5))
segments <- create_segments(fun, domain=dom, nsegs=20)
slice_plot(fun, dom) \%>\%
  # show the slope function as slopes
  gf_segment(y + yend ~ x + xend, data = segments, color=~slope) \%>\%
  gf_refine(scale_color_viridis_c())

slice_plot(fun, dom) \%>\%
  # piecewise linear approximations
  gf_segment(yf + yfend ~ x + xend, data = segments, color=~slope,
  size=2, alpha=0.5) \%>\%
  gf_refine(scale_color_viridis_c())

slice_plot(fun, dom) \%>\%
  # show the approximate slope function
  gf_line(slope ~ x , data = segments, color=~slope) \%>\%
  gf_refine(scale_color_viridis_c())

}

}
